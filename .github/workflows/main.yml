name: Release Automation

on:
  push:
    # Trigger on versioned tags (e.g., v1.0.0, v20.15.10)
    tags:
      - 'v[0-9]+.*'

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"  # Ensure compatibility with your project

      # Step 3: Install project dependencies
      - name: Install Dependencies
        run: npm install --legacy-peer-deps

      # Step 4: Verify Dependencies Installation
      - name: Verify Node Modules
        run: |
          if [ ! -d "node_modules" ]; then
            echo "node_modules directory not found!"
            exit 1
          fi
          ls -lh node_modules

      # Step 5: Build the project
      - name: Build Project
        run: npm run build  # Ensure you have a build script in package.json

      # Step 6: Verify Build Output
      - name: Verify Build Folder
        run: |
          if [ ! -d "./build" ]; then
            echo "Build folder not found!"
            exit 1
          fi
          ls -lh ./build

      # Step 7: Create a GitHub release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Ensure this secret exists in your repository
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          body: |
            Changes in this Release:
            - Add change details here.
          draft: false
          prerelease: false

      # Step 8: Zip the build folder
      - name: Zip the Build Folder
        run: zip -r build.zip ./build

      # Step 9: Verify the Zip File
      - name: Verify Build.zip
        run: |
          if [ ! -f "build.zip" ]; then
            echo "build.zip not created!"
            exit 1
          fi
          ls -lh build.zip

      # Step 10: Cleanup
      - name: Cleanup Temporary Files
        run: |
          echo "Cleaning up temporary files..."
          rm -rf build.zip ./build
